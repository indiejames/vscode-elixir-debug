export default class DebugEx {
  public static elixirDebugModule(): [string] {
	return ["defmodule Debug do",
  	"def dbg(pid) do",
		"IO.puts \"DEBUG\"",
		"send pid, :called",
		"{:ok, meta} = :int.attached(pid)",
		"# trace = :int.meta(meta, :trace, true)",
		"# IO.puts(inspect(trace))",
		"# stack_trace = :int.meta(meta, :stack_trace, :all)",
		"# IO.puts(inspect(stack_trace))",
		"#stack_trace = :erlang.get_stacktrace()",
		"#IO.puts(\"BACKTRACE\")",
		"#IO.puts(inspect(stack_trace))",
		"{:backtrace, backtrace} = :erlang.process_info(self, :backtrace)",
		"# back_trace = :int.meta(meta, :eval, {\"\"})",
		"IO.puts(backtrace)",
		"# frame = :int.meta(meta, :stack_frame, {:down, 1})",
		"b1 = :int.meta(meta, :bindings, :nostack)",
		"send pid, {:b1, b1}",
		":int.step(pid)",
		"b2 = :int.meta(meta, :bindings, :nostack)",
		"send pid, {:b2, b2}",
		":int.finish(pid)",
	"end",
	"def get_binding(binding, var) do",
		"atom_str = Atom.to_string(var)",
		"atom_str = \"#{atom_str}@1\"",
		"atom = String.to_atom(atom_str)",
		"binding[atom]",
	"end",
	"end"];
  }
}